@model ProductOverviewModel
@{
    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    string addtowishlistlink = "";
    string quickviewurl = Url.RouteUrl("QuickView-Product", new { productId = Model.Id }); 

    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (!Model.ShowQty)
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    }
    else
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId});
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist});
    }
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
    <div class="card gen" data-productid="@Model.Id">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img class="card-img-top img-fluid" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
         @if (!string.IsNullOrEmpty(Model.Flag))
         {
             <span class="new-product-label bg-info text-white">@Model.Flag</span>
         }
         @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
         {
            <span class="change-percent bg-success text-white"></span>
         }
        <div class="card-body p-0">
            <div class="d-flex justify-content-center card-buttons">
                    <div class="btn-group">
                        @if (Model.ShowQty)
                        {
                            var qtyId = "addtocart_" + @Model.Id + "_EnteredQuantity";
                            <input class="form-control input-group-addon catalog-quantity"  
                                   type="text" id="@qtyId" name="@qtyId" value="1" >
                        }
                        @if (!Model.ProductPrice.DisableBuyButton)
                        {
                            var addToCartText = T("ShoppingCart.AddToCart").Text;
                            if (Model.ProductType == ProductType.Reservation)
                            {
                                addToCartText = T("ShoppingCart.Reservation").Text;
                            }
                            if (Model.ProductPrice.AvailableForPreOrder)
                            {
                                addToCartText = T("ShoppingCart.PreOrder").Text;
                            }
                            <button type="button" class="btn btn-primary" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.ShowQty', '@Model.Id');return false;">
                                @if (!Model.ShowQty)
                                {
                                    <span class="add-cart-text d-sm-block d-none">@(addToCartText)</span>
                                    <span class="fas fa-shopping-cart d-sm-none d-block"></span>
                                }
                                <span class="sr-only">AddToCart</span>
                            </button>
                        }
                        else
                        {
                            if (Model.ProductType == ProductType.Auction)
                            {
                                var addToCartText = T("ShoppingCart.Bids").Text;
                                <button type="button" class="btn btn-primary" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', 'false', '@Model.Id');return false;">
                                    <span class="fa fa-gavel"></span>
                                        <span class="d-none d-xl-block">@(addToCartText)</span>
                                    <span class="sr-only">AddToCart</span>
                                </button>
                            }

                        }
                        <button type="button" value="@T("Products.QuickView")"  title="@T("Products.QuickView")" class="btn btn-secondary btn-quick-view" data-toggle="modal" data-target="ModalQuickView" onclick="AjaxCart.quickview_product('@quickviewurl')">
                            <span class="sr-only">@T("Products.QuickView")</span>
                            <span class="fas fa-search"></span>
                        </button>
                        @if (!Model.ProductPrice.DisableAddToCompareListButton && Model.ProductType == ProductType.SimpleProduct)
                        {
                            <button type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="btn btn-secondary" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">
                                <span class="sr-only">AddToCompareList</span>
                                <span class="fa fa-retweet"></span>
                            </button>
                        }
                        @if (!Model.ProductPrice.DisableWishlistButton && Model.ProductType == ProductType.SimpleProduct)
                        {
                            <button type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="btn btn-secondary" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink', '@Model.ShowQty', '@Model.Id');return false;">
                                <span class="far fa-heart"></span>
                                <span class="sr-only">AddToWishlist</span>
                            </button>

                        }

                    </div>
                </div>
            <div class="card-body-content">
                <h3 class="h6 card-title mb-0">
                <strong><a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a></strong>
                @if (Model.ShowSku && !string.IsNullOrEmpty(Model.Sku))
                {
                        <span class="d-block py-1">@Model.Sku</span>
                }
            </h3>
            @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })

            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                int ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="col-12 px-0">
                    <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                        <div class="rating box-progress10 rating_@Model.Id" data-rating="@(ratingPercent)" data-id="rating_@Model.Id">
                        </div>
                    </div>
                </div>
            }
            @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
            @if (Model.ProductType == ProductType.Auction)
            {
                @if (Model.EndTime.HasValue)
                {
                    <div>
                        @if (Model.EndTime > DateTime.UtcNow)
                        {
                            <label class="d-inline-block">@T("AddToCart.Timeleft"): </label>
                            <div class="d-inline-block" data-countdown="@Model.EndTime.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")"></div>
                        }
                            else
                            {
                            <label>@T("ShoppingCart.Auctionends"): @Model.EndTime.Value.ToLocalTime()</label>
                        }
                    </div>
                }
            }
            <div class="row pb-0 px-3 pt-0">
                @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
                @if (Model.ProductType != ProductType.Auction)
                {
                    <div class="p-0 pr-2 align-self-center">
                        <span class="h5 card-subtitle pb-1 pt-1">
                            <span class="price actual-price">@Model.ProductPrice.Price</span>
                        </span>
                    </div>
                }
                else
                {
                    <div class="p-0 pr-2 align-self-center">
                        <span class="h5 card-subtitle pb-1 pt-1">
                            <span class="price actual-price">@(Model.ProductPrice.HighestBidValue > 0 ? Model.ProductPrice.HighestBid : Model.ProductPrice.StartPrice)</span>
                        </span>
                    </div>
                }
                @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                {
                    <div class="col px-0 align-self-center">
                        <span class="h6 card-subtitle">
                            <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                        </span>
                    </div>
                }
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = Model.TaxDisplayType == TaxDisplayType.IncludingTax;
                    <div class="col-12 tax-shipping-info mt-2 mb-2 px-0">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </div>
                }
            </div>
            <p class="card-text d-none">
                @Html.Raw(Model.ShortDescription)
            </p>
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })
    </div>