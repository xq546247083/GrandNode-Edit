@model SiteMapNode
@using Grand.Core
@using Grand.Framework.Menu
@inject IWebHelper webHelper

@{
    string url = "javascript:;";
    if (!string.IsNullOrEmpty(Model.ControllerName) && !string.IsNullOrEmpty(Model.ActionName))
    {
        url = Url.Action(Model.ActionName, Model.ControllerName, Model.RouteValues, null, null);

        string test = webHelper.GetRawUrl(this.Context.Request).ToLowerInvariant();
    }
    else if (!string.IsNullOrEmpty(Model.Url))
    {
        url = Model.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(Model.Url) : Model.Url;

        string test = webHelper.GetRawUrl(this.Context.Request).ToLowerInvariant();

    }

<li class="nav-item @(url.ToLowerInvariant() == webHelper.GetRawUrl(this.Context.Request).ToLowerInvariant() ? "start active": "") @(url.ToLowerInvariant() == webHelper.GetRawUrl(this.Context.Request).ToLowerInvariant() ? "active open" : "") ">

    <a href="@url" class="nav-link nav-toggle">
        @if (!String.IsNullOrEmpty(Model.IconClass))
            {
            <i class="@Model.IconClass"></i>
        }
        <span class="title">@Model.Title</span>
        <span class="selected"></span>
        <span class="arrow"></span>
    </a>

    @{
        var childNodes = Model.ChildNodes.Where(x => x.Visible).ToList();
    }

    @if (childNodes.Any())
    {
        <ul class="sub-menu">
            @foreach (var childItem in childNodes)
            {
                <partial name="_MenuItem" model="childItem"/>
            }
        </ul>
    }
</li>
}